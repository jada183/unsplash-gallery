{"version":3,"sources":["pages/home/home.jsx","pages/main/main.jsx","App.jsx","index.js"],"names":["Home","useState","searchValue","setNewSearchValue","imageList","setImageList","pages","setPages","useEffect","getImages","managePhotoResponse","response","infiteScroll","console","log","imageListIncreased","concat","addImageToList","window","scroll","parameters","query","page","axios","method","url","params","then","data","results","className","type","id","placeholder","value","onChange","e","target","onClick","dataLength","length","next","hasMore","map","index","urls","alt_description","src","small","alt","Main","exact","path","component","App","interceptors","request","use","headers","ReactDOM","render","document","getElementById"],"mappings":"kSAgHeA,EA3GF,WACT,MAAyCC,mBAAS,IAAlD,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0BJ,mBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAEAC,qBAAU,SAACN,EAAaI,GACpBG,EAAUP,EAAaI,GAAO,KAC/B,IACH,IAUMI,EAAsB,SAACC,EAAUC,GAC/BA,EAPe,SAACD,GACpBE,QAAQC,IAAI,YAAaV,GACzB,IAAMW,EAAqBX,EAAUY,OAAOL,GAC5CE,QAAQC,IAAI,qBAAsBC,GAClCV,EAAaU,GAITE,CAAeN,IAEfE,QAAQC,IAAI,gBACZP,EAAS,GACTW,OAAOC,OAAO,EAAG,GACjBd,EAAaM,KAIfF,EAAY,SAACP,EAAaI,EAAOM,GACnC,IAAMQ,EAAa,CACfC,MAAOnB,GAEX,OAAIA,IAAgBU,GAChBQ,EAAWE,KAAO,EAClBT,QAAQC,IAAI,UACLS,IAAM,CACTC,OAAQ,MACRC,IAAK,yCACLC,OAAQN,IAEPO,MAAK,SAAAhB,GAAQ,OAAIA,EAASiB,KAAKC,WAC/BF,MAAK,SAAAhB,GACFD,EAAoBC,EAAUC,QAGtCQ,EAAWE,KAAOhB,EACXiB,IAAM,CACTC,OAAQ,MACRC,IAAK,kCACLC,OAAQN,IAEPO,MAAK,SAAAhB,GAAQ,OAAIA,EAASiB,QAC1BD,MAAK,SAAAhB,GACFD,EAAoBC,EAAUC,QAI9C,OACI,sBAAKkB,UAAU,YAAf,UACI,qBAAKA,UAAU,2DAAf,SACI,uBAAMA,UAAU,SAAhB,UACI,qBAAKA,UAAU,uBAAf,SACI,qBAAKA,UAAU,GAAf,SACI,uBAAOC,KAAK,OACRC,GAAG,cACHF,UAAU,eACVG,YAAY,iCACZC,MAAOhC,EACPiC,SAAU,SAAAC,GACNjC,EAAkBiC,EAAEC,OAAOH,cAM3C,qBAAKJ,UAAU,2CAAf,SACI,wBAAQQ,QAAS,kBAAM7B,EAAUP,EAAa,GAAG,IAAQ6B,KAAK,SAASD,UAAU,kBAAjF,2BAKZ,qBAAKA,UAAU,YAAf,SACI,qBAAKA,UAAU,MAAf,SACI,cAAC,IAAD,CACIS,WAAYnC,EAAUoC,OACtBC,KAAM,kBA7EtBlC,EAASD,EAAQ,QACjBG,EAAUP,EAAaI,GAAO,IA6EdoC,SAAS,EAHb,SAKKtC,EAAUuC,KAAI,WAEZC,GAFY,IACXZ,EADW,EACXA,GAAIa,EADO,EACPA,KAAMC,EADC,EACDA,gBADC,OAGX,qBAAKhB,UAAU,mBAAf,SACI,qBAAKiB,IAAKF,EAAKG,MAAOC,IAAKH,KADQF,EAAQZ,gBCrF5DkB,EATF,WACT,OACI,+BACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,GAAGC,UAAWrD,SCGjCsD,MARf,WACE,OACE,qBAAKxB,UAAU,MAAf,SACE,cAAC,EAAD,O,cCENP,IAAMgC,aAAaC,QAAQC,KACzB,SAACD,GAGC,OAFAA,EAAQE,QAAQ,kBAAoB,KACpCF,EAAQE,QAAR,cAAmC,wDAC5BF,KAGXG,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ac792893.chunk.js","sourcesContent":["import \"./home.css\";\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from \"axios\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\nconst Home = () => {\r\n    const [searchValue, setNewSearchValue] = useState('');\r\n    const [imageList, setImageList] = useState([]);\r\n    const [pages, setPages] = useState(1);\r\n\r\n    useEffect((searchValue, pages) => {\r\n        getImages(searchValue, pages, true);\r\n    }, []);\r\n    const fetchMoreData = () => {\r\n        setPages(pages + 1);\r\n        getImages(searchValue, pages, true);\r\n    }\r\n    const addImageToList = (response) => {\r\n        console.log('imageList', imageList);\r\n        const imageListIncreased = imageList.concat(response);\r\n        console.log('imageListIncreased', imageListIncreased);\r\n        setImageList(imageListIncreased);\r\n    }\r\n    const managePhotoResponse = (response, infiteScroll) => {\r\n        if (infiteScroll) {\r\n            addImageToList(response);\r\n        } else {\r\n            console.log('setImageList');\r\n            setPages(0);\r\n            window.scroll(0, 0);\r\n            setImageList(response);\r\n        }\r\n\r\n    }\r\n    const getImages = (searchValue, pages, infiteScroll) => {\r\n        const parameters = {\r\n            query: searchValue,\r\n        };\r\n        if (searchValue && !infiteScroll) {\r\n            parameters.page = 9;\r\n            console.log('SEARCH');\r\n            return axios({\r\n                method: \"GET\",\r\n                url: \"https://api.unsplash.com/search/photos\",\r\n                params: parameters\r\n            })\r\n                .then(response => response.data.results)\r\n                .then(response => {\r\n                    managePhotoResponse(response, infiteScroll);\r\n                })\r\n        } else {\r\n            parameters.page = pages;\r\n            return axios({\r\n                method: \"GET\",\r\n                url: \"https://api.unsplash.com/photos\",\r\n                params: parameters\r\n            })\r\n                .then(response => response.data)\r\n                .then(response => {\r\n                    managePhotoResponse(response, infiteScroll);\r\n                })\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"container\">\r\n            <nav className=\"navbar navbar-expand-sm sticky-top navbar-light bg-light\">\r\n                <form className=\"col-12\">\r\n                    <div className=\"row text-center mb-2\">\r\n                        <div className=\"\">\r\n                            <input type=\"text\"\r\n                                id=\"search-text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"AÃ±ade un filtro de busqueda\"\r\n                                value={searchValue}\r\n                                onChange={e => {\r\n                                    setNewSearchValue(e.target.value);\r\n\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row text-center col-4 offset-4 mb-3 mt-3\">\r\n                        <button onClick={() => getImages(searchValue, 1, false)} type=\"button\" className=\"btn btn-primary\">Buscar</button>\r\n                    </div>\r\n                </form>\r\n            </nav>\r\n\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <InfiniteScroll\r\n                        dataLength={imageList.length}\r\n                        next={() => fetchMoreData()}\r\n                        hasMore={true}\r\n                    >\r\n                        {imageList.map(({\r\n                            id, urls, alt_description\r\n                        }, index) => (\r\n                            <div className=\"text-center mb-3\" key={index + id}>\r\n                                <img src={urls.small} alt={alt_description} />\r\n                            </div>\r\n                        ))}\r\n                    </InfiniteScroll>\r\n\r\n\r\n\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n};\r\nexport default Home;\r\n\r\n","import { Switch, Route } from 'react-router-dom';\r\nimport Home from \"../home/home\";\r\n\r\nconst Main = () => {\r\n    return (\r\n        <main>\r\n            <Switch>\r\n                <Route exact path=\"\" component={Home} />\r\n            </Switch>\r\n        </main>\r\n    )\r\n};\r\nexport default Main;","import './App.css';\nimport Main from './pages/main/main';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport axios from 'axios';\naxios.interceptors.request.use(\n  (request) => {\n    request.headers['Accept-Version'] = 'v1';\n    request.headers['Authorization'] = 'Client-ID 3pBVO1EmJlDmFTAH3VECukfrfAD_C6nPrVquHhxzOz8';\n    return request\n  }\n)\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}
{"version":3,"sources":["pages/home/home.jsx","pages/main/main.jsx","App.jsx","index.js"],"names":["Home","useState","searchValue","setNewSearchValue","imageList","setImageList","imageSelected","setImageSelected","scrollPosition","setScrollPosition","useEffect","pages","getImages","window","scroll","managePhotoResponse","response","infiteScroll","imageListIncreased","concat","addImageToList","perPage","parameters","query","page","per_page","axios","method","url","params","then","data","results","className","type","id","placeholder","value","onChange","e","target","onClick","map","index","urls","alt_description","created_at","likes","description","src","small","alt","scrollY","height","regular","date","Date","toString","Main","exact","path","component","App","interceptors","request","use","headers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5b15230a.chunk.js","sourcesContent":["import \"./home.css\";\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from \"axios\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\n\r\n// const initialPageState = 1;\r\nconst perPageDefault = 10;\r\nconst Home = () => {\r\n    const [searchValue, setNewSearchValue] = useState('');\r\n    const [imageList, setImageList] = useState([]);\r\n    // const [pages, setPages] = useState(initialPageState);\r\n    const [imageSelected, setImageSelected] = useState('');\r\n    const [scrollPosition, setScrollPosition] = useState(0);\r\n    useEffect((searchValue, pages) => {\r\n        getImages(searchValue, pages, true, perPageDefault);\r\n    }, [searchValue]);\r\n    // const fetchMoreData = () => {\r\n    //     setPages(pages + 1);\r\n    //     getImages(searchValue, pages, true);\r\n    // }\r\n    useEffect((imageSelected) => {\r\n        window.scroll(0, scrollPosition);\r\n    }, [imageSelected]);\r\n    const addImageToList = (response) => {\r\n        const imageListIncreased = imageList.concat(response);\r\n        setImageList(imageListIncreased);\r\n    }\r\n    const managePhotoResponse = (response, infiteScroll) => {\r\n        if (infiteScroll) {\r\n            addImageToList(response);\r\n        } else {\r\n            // setPages(0);\r\n            window.scroll(0, 0);\r\n            setImageList(response);\r\n        }\r\n\r\n    }\r\n    const changeView = () => {\r\n        setImageSelected('');\r\n    }\r\n\r\n    const getImages = (searchValue, pages, infiteScroll, perPage) => {\r\n        const parameters = {\r\n            query: searchValue,\r\n            page: pages,\r\n            per_page: perPage\r\n        };\r\n        if (searchValue) {\r\n            return axios({\r\n                method: \"GET\",\r\n                url: \"https://api.unsplash.com/search/photos\",\r\n                params: parameters\r\n            })\r\n                .then(response => response.data.results)\r\n                .then(response => {\r\n                    managePhotoResponse(response, infiteScroll);\r\n                })\r\n        } else {\r\n            return axios({\r\n                method: \"GET\",\r\n                url: \"https://api.unsplash.com/photos\",\r\n                params: parameters\r\n            })\r\n                .then(response => response.data)\r\n                .then(response => {\r\n                    managePhotoResponse(response, infiteScroll);\r\n                })\r\n        }\r\n    };\r\n    const convertISOStringToMonthDay = (date) => {\r\n        const tempDate = new Date(date).toString();\r\n        return tempDate;\r\n;\r\n      };\r\n    return (\r\n        <div className=\"container\">\r\n            <nav className=\"navbar navbar-expand-sm sticky-top navbar-light bg-light\">\r\n                <form className=\"col-12\">\r\n                    <div className=\"row text-center mb-2\">\r\n                        <div className=\"\">\r\n                            <input type=\"text\"\r\n                                id=\"search-text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Add search filter\"\r\n                                value={searchValue}\r\n                                onChange={e => {\r\n                                    setNewSearchValue(e.target.value);\r\n\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row text-center col-4 offset-4 mb-3 mt-3\">\r\n                        <button onClick={() => getImages(searchValue, 1, false, 9)} type=\"button\" className=\"btn btn-primary\">Search</button>\r\n                    </div>\r\n                </form>\r\n            </nav>\r\n            {(\r\n                () => {\r\n                    if (!imageSelected) {\r\n                        return <div className=\"container\">\r\n                            <div className=\"row\">\r\n                                {/* <InfiniteScroll\r\n                                dataLength={imageList.length}\r\n                                next={() => fetchMoreData()}\r\n                                hasMore={true}\r\n                            > */}\r\n                                {imageList.map(({\r\n                                    id, urls, alt_description, created_at, likes, description\r\n                                }, index) => (\r\n                                    <div className=\"text-center mb-3\" key={index + id}>\r\n                                        <img src={urls.small} alt={alt_description} onClick={() => {\r\n                                            setScrollPosition(window.scrollY);\r\n                                            setImageSelected({ urls, alt_description, created_at, likes, description});\r\n                                        }} />\r\n                                    </div>\r\n                                ))}\r\n                                {/* </InfiniteScroll> */}\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                })()}\r\n            {(\r\n                () => {\r\n                    if (imageSelected) {\r\n                        return <div className=\"container\">\r\n                            <div className=\"row text-center\">\r\n                                <div className=\"mb-3\" >\r\n                                    <img height=\"768px\" src={imageSelected.urls.regular} onClick={() => {\r\n                                        changeView();\r\n                                        window.scroll(0, scrollPosition);\r\n                                    }} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row text-center\">\r\n                                <strong>Creation at</strong>\r\n                                <span>{convertISOStringToMonthDay(imageSelected.created_at)}</span>\r\n                            </div>\r\n                            <div className=\"row text-center\">\r\n                                <span><strong>Likes: </strong><span>{imageSelected.likes}</span></span>\r\n                            </div>\r\n                            <div className=\"row text-center\">\r\n                                <span><strong>description: </strong><span>{imageSelected.description}</span></span>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                })()}\r\n        </div>\r\n    )\r\n};\r\nexport default Home;\r\n\r\n","import { Switch, Route } from 'react-router-dom';\r\nimport Home from \"../home/home\";\r\n\r\nconst Main = () => {\r\n    return (\r\n        <main>\r\n            <Switch>\r\n                <Route exact path=\"\" component={Home} />\r\n            </Switch>\r\n        </main>\r\n    )\r\n};\r\nexport default Main;","import './App.css';\nimport Main from './pages/main/main';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport axios from 'axios';\naxios.interceptors.request.use(\n  (request) => {\n    request.headers['Accept-Version'] = 'v1';\n    request.headers['Authorization'] = 'Client-ID 3pBVO1EmJlDmFTAH3VECukfrfAD_C6nPrVquHhxzOz8';\n    return request\n  }\n)\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}